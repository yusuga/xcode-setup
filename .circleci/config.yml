version: 2.1
executors:
  macos_executor:
    macos:
      xcode: "13.0.0"
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      DERIVED_DATA_PATH: DerivedData
      OUTPUT_PATH: output
    shell: /bin/bash --login -eo pipefail
  machine_executor:
    machine:
      image: ubuntu-2004:202010-01

commands:
  resolve_gem:
    steps:
      - checkout
      - restore_cache:
          name: Restoring gem
          key: gem-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gemfile.lock" }}
      - run:
          command: make check-gem || make gem
      - save_cache:
          name: Saving gem
          key: gem-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - persist_to_workspace:
          root: .
          paths:
            - vendor/bundle
  resolve_git_submodule:
    steps:
      - checkout
      - run: 
          command: make git-submodule
          working_directory: App
      - persist_to_workspace:
          root: .
          paths:
            - App/Mint
  make_app_dependencies:
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restoring mint
          key: 1-mint-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Mint/CHANGELOG.md" }}
      - restore_cache:
          name: Restoring mintfile
          key: 1-mintfile-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Mintfile" }}
      - run:
          command: make mint
          working_directory: App
      - save_cache:
          name: Saving mint
          key: 1-mint-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Mint/CHANGELOG.md" }}
          paths:
            - App/Mint/.build/apple/Products/Release/mint
      - save_cache:
          name: Saving mintfile
          key: 1-mintfile-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Mintfile" }}
          paths:
            - App/.mint
      - restore_cache:
          name: Restoring Carthage
          key: carthage-build-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Cartfile.resolved" }}
      - run:
          command: make carthage USE_CACHE=true
          working_directory: App
          no_output_timeout: 1h
      - save_cache:
          key: carthage-build-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Cartfile.resolved" }}
          paths:
            - App/Carthage/Build
      - run:
          command: make asset-files
          working_directory: App
      - run:
          command: make xcodeproj
          working_directory: App
      - persist_to_workspace:
          root: .
          paths:
            - App/Mint
            - App/.mint
            - App/Carthage/Build
            - App/App/Assets/Assets.swift
            - App/App.xcodeproj
  make_cocoapods:
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restoring CocoaPods
          key: pod-build-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Podfile.lock" }}
      - run:
          command: make cocoapods
          working_directory: App
      - run:
          # Required to resolve `Permission denied` for persist_to_workspace.
          command: |
            sudo chown -R circleci Pods
            sudo chown -R circleci App.xcodeproj
            sudo chown -R circleci App.xcworkspace
          working_directory: App          
      - save_cache:
          key: pod-build-{{ .Environment.CACHE_VERSION }}-{{ checksum "App/Podfile.lock" }}
          paths:
            - App/Pods
      - persist_to_workspace:
          root: .
          paths:
            - App/Pods
            - App/App.xcodeproj
            - App/App.xcworkspace
  build:
    parameters:
      configuration:
        type: enum
        enum: ["release"]
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create APP_DATE
          command: |
            #!/bin/bash --login -eo pipefail
            echo "export APP_DATE="`TZ=Asia/Tokyo date +'%Y%m%d-%H%M%S'` >> $BASH_ENV
            source $BASH_ENV
            # Workflow間での環境変数の受け渡しが分からなかったため、ファイルに書き出し
            echo $APP_DATE >> App/APP_DATE
      - run:
          name: add github ip addresses to known hosts
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
#       - run:
#           command: bundle exec fastlane build configuration:<< parameters.configuration >>
#           no_output_timeout: 1h
      - persist_to_workspace:
          root: .
          paths:
             - App/APP_DATE
  deploy:
    parameters:
      configuration:
        type: enum
        enum: ["release"]
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          cat App/APP_DATE
  build_for_simulator:
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: add github ip addresses to known hosts
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run: 
          command: |
            mkdir ${DERIVED_DATA_PATH}
            mkdir ${OUTPUT_PATH}
      - run:
          command: bundle exec fastlane build_for_simulator derived_data_path:${DERIVED_DATA_PATH}
          no_output_timeout: 1h
      - run:
          name: Copy app
          command: |
            mv "$(find ${DERIVED_DATA_PATH} -name \*.app -print -quit)" ${OUTPUT_PATH}
            ls ${OUTPUT_PATH}
      - store_artifacts:
          # Note: Environment variables are not available in store_artifacts
          path: output
      - persist_to_workspace:
          root: .
          paths:
            - output
  magic-pod-e2e-test:
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restoring magic-pod-api-client
          key: magic-pod-api-client-mac-{{ .Environment.CACHE_VERSION }}-{{ .Environment.MAGIC_POD_API_CLIENT_VERSION }}
      - run:
          name: GET magic-pod-api-client
          command: |
            if [ ! -f mac64_magic-pod-api-client.zip ]; then
              curl -L -O https://github.com/Magic-Pod/magic-pod-api-client/releases/download/${MAGIC_POD_API_CLIENT_VERSION}/mac64_magic-pod-api-client.zip
            fi
            unzip mac64_magic-pod-api-client.zip
      - save_cache:
          name: Saving mac64_magic-pod-api-client
          key: magic-pod-api-client-mac-{{ .Environment.CACHE_VERSION }}-{{ .Environment.MAGIC_POD_API_CLIENT_VERSION }}
          paths:
            - mac64_magic-pod-api-client.zip
      - run:
          name: Delete all apps from MagicPod
          command:
            bundle exec fastlane magicpod_delete_all_apps api_client_path:"$(pwd)"/magic-pod-api-client
      - run:
          # https://help.trident-qa.com/magic-pod-circleci/
          name: MagicPod E2E Test
          command: |
            # app/ipa/apkファイルをMagic Podにアップロードして、FILE_NOを取得
            FILE_NO=$(./magic-pod-api-client upload-app -a "$(find output -name \*.app -print -quit)")
            
            # 先ほどアップロードしたアプリと、設定番号の設定を使ってテスト一括実行（`-n` で一括テスト結果を待たない)
            ./magic-pod-api-client batch-run \
              -s "{\"app_file_number\":\"${FILE_NO}\"}" \
              -S ${MAGIC_POD_BATCH_TEST_NUMBER} \
              -n

jobs:
  resolve_deploy_tools:
    executor: macos_executor
    steps:
      - resolve_gem
  resolve_git_submodule:
    executor: machine_executor
    steps:
      - resolve_git_submodule
  resolve_app_dependencies_on_macos:
    executor: macos_executor
    steps:
      - make_app_dependencies
  resolve_app_dependencies_on_docker:
    executor: machine_executor
    steps:
      - make_cocoapods
  build:
    executor: macos_executor
    steps:
      - build:
          configuration: release
  deploy:
    executor: machine_executor
    steps:
      - deploy:
          configuration: release
  build_for_simulator:
    executor: macos_executor
    steps:
      - build_for_simulator
  magic-pod-e2e-test:
    executor: macos_executor
    steps:
      - magic-pod-e2e-test

workflows:
  version: 2
  test_and_release:
    jobs:
      - resolve_deploy_tools:
          filters:
            branches:
              only:
                - master
      - resolve_git_submodule:
          filters:
            branches:
              only:
                - master
      - resolve_app_dependencies_on_macos:
          filters:
            branches:
              only:
                - master
          requires:
            - resolve_git_submodule
      - resolve_app_dependencies_on_docker:
          filters:
            branches:
              only:
                - master
          requires:
            - resolve_app_dependencies_on_macos
      - build:
          filters:
            branches:
              only:
                - master
          requires:
            - resolve_deploy_tools
            - resolve_app_dependencies_on_docker
      - approval_deploy:
          type: approval
          filters:
            branches:
              only:
                - master
          requires:
            - build
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - approval_deploy
#       - build_for_simulator:
#           filters:
#             branches:
#               only:
#                 - master
#           requires:
#             - resolve_deploy_tools
#             - resolve_app_dependencies_on_docker
#       - magic-pod-e2e-test:
#           filters:
#             branches:
#               only:
#                 - master
#           requires:
#             - build_for_simulator